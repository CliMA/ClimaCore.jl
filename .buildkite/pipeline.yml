env:
  JULIA_VERSION: "1.7.1"
  OPENMPI_VERSION: "4.1.1"
  CUDA_VERSION: "11.2"
  OPENBLAS_NUM_THREADS: 1

steps:
  - label: "init :computer:"
    key: "init_cpu_env"
    command:
      - "julia --project -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project -e 'using Pkg; Pkg.precompile(;strict=true)'"

      - "julia --project=test -e 'using Pkg; Pkg.develop(path=\".\")'"
      - "julia --project=test -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project=test -e 'using Pkg; Pkg.precompile(;strict=true)'"

      - "julia --project=perf -e 'using Pkg; Pkg.develop(path=\".\")'"
      - "julia --project=perf -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project=perf -e 'using Pkg; Pkg.precompile(;strict=true)'"

      - "julia --project=examples -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project=examples -e 'using Pkg; Pkg.precompile(;strict=true)'"

      - "julia --project=benchmarks/bickleyjet -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project=benchmarks/bickleyjet -e 'using Pkg; Pkg.precompile(;strict=true)'"

      - "julia --project -e 'using Pkg; Pkg.status()'"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1
      slurm_cpus_per_task: 8
    env:
      JULIA_NUM_PRECOMPILE_TASKS: 8

  - label: "init :flower_playing_cards:"
    key: "init_gpu_env"
    command:
      - "export CUDA_HOME=/usr/local/cuda-$$CUDA_VERSION"

      - "julia --project -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project -e 'using Pkg; Pkg.precompile(;strict=true)'"

      - "julia --project=test -e 'using Pkg; Pkg.develop(path=\".\"); Pkg.instantiate(;verbose=true)'"
      - "julia --project=test -e 'using Pkg; Pkg.precompile(;strict=true)'"

      # force the initialization of the CUDA runtime as it is lazily loaded by default
      - "julia --project -e 'using CUDA; CUDA.precompile_runtime()'"
      - "julia --project -e 'using CUDA; CUDA.versioninfo()'"

      - "julia --project=benchmarks/bickleyjet -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project=benchmarks/bickleyjet -e 'using Pkg; Pkg.precompile(;strict=true)'"

      - "julia --project -e 'using Pkg; Pkg.status()'"
    agents:
      config: gpu
      queue: central
      slurm_ntasks: 1
      slurm_cpus_per_task: 8
      slurm_gres: "gpu:1"
    env:
      JULIA_NUM_PRECOMPILE_TASKS: 8

  - wait

  - label: ":computer: unit tests"
    key: "cpu_unittests"
    command:
      - "julia --color=yes --check-bounds=yes --project=test test/runtests.jl"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":flower_playing_cards: unit tests"
    key: "gpu_unittests"
    command:
      - "export CUDA_HOME=/usr/local/cuda-$$CUDA_VERSION"
      - "julia --color=yes --check-bounds=yes --project=test test/runtests.jl CUDA"
    agents:
      config: gpu
      queue: central
      slurm_ntasks: 1
      slurm_gres: "gpu:1"

  - label: ":computer: Column Heat Diffusion Eq"
    key: "cpu_column_heat"
    command:
      - "julia --color=yes --project=examples examples/column/heat.jl"
    artifact_paths:
      - "examples/column/output/heat/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Column Advection Step Eq"
    key: "cpu_column_step_advect"
    command:
      - "julia --color=yes --project=examples examples/column/step.jl"
    artifact_paths:
      - "examples/column/output/advect_step_function/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Column Advection Eq"
    key: "cpu_column_advect"
    command:
      - "julia --color=yes --project=examples examples/column/advect.jl"
    artifact_paths:
      - "examples/column/output/advect/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Column Advection Diffusion Eq"
    key: "cpu_column_advect_diff"
    command:
      - "julia --color=yes --project=examples examples/column/advect_diffusion.jl"
    artifact_paths:
      - "examples/column/output/advect_diffusion/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Column Ekman Eq"
    key: "cpu_column_ekman"
    command:
      - "julia --color=yes --project=examples examples/column/ekman.jl"
    artifact_paths:
      - "examples/column/output/ekman/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Column Hydrostatic Ekman Eq"
    key: "cpu_column_hydrostatic_ekman"
    command:
      - "julia --color=yes --project=examples examples/column/hydrostatic_ekman.jl"
    artifact_paths:
      - "examples/column/output/hydrostatic_ekman/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Column Wave Eq"
    key: "cpu_column_wave"
    command:
      - "julia --color=yes --project=examples examples/column/wave.jl"
    artifact_paths:
      - "examples/column/output/wave/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Column Hydrostatic Balance Eq"
    key: "cpu_column_hydrostatic"
    command:
      - "julia --color=yes --project=examples examples/column/hydrostatic.jl"
    artifact_paths:
      - "examples/column/output/hydrostatic/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Column Hydrostatic Balance Eq with discretely balanced initial condition"
    key: "cpu_column_hydrostatic_discrete"
    command:
      - "julia --color=yes --project=examples examples/column/hydrostatic_discrete.jl"
    artifact_paths:
      - "examples/column/output/hydrostatic_discrete/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Column Hydrostatic Balance Eq - implicit"
    key: "cpu_column_hydrostatic_implicit"
    command:
      - "julia --color=yes --project=examples examples/column/hydrostatic_implicit.jl"
    artifact_paths:
      - "examples/column/output/hydrostatic_implicit/*"
    soft_fail:
      - exit_status: 1
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Bickley jet CG"
    key: "cpu_bickleyjet_cg"
    command:
      - "julia --color=yes --project=examples examples/bickleyjet/bickleyjet_cg.jl"
    artifact_paths:
      - "examples/bickleyjet/output/cg/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Bickley jet CG unstructured mesh"
    key: "cpu_bickleyjet_cg_unsmesh"
    command:
      - "julia --color=yes --project=examples examples/bickleyjet/bickleyjet_cg_unsmesh.jl"
    artifact_paths:
      - "examples/bickleyjet/output/cg_unsmesh/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Bickley jet CG vector invariant hyperviscosity"
    key: "cpu_bickleyjet_cg_invariant_hypervisc"
    command:
      - "julia --color=yes --project=examples examples/bickleyjet/bickleyjet_cg_invariant_hypervisc.jl"
    artifact_paths:
      - "examples/bickleyjet/output/cg_invariant_hypervisc/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Bickley jet DG rusanov"
    key: "cpu_bickleyjet_dg_rusanov"
    command:
      - "julia --color=yes --project=examples examples/bickleyjet/bickleyjet_dg.jl rusanov"
    artifact_paths:
      - "examples/bickleyjet/output/dg_rusanov/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Bickley jet DG roe"
    key: "cpu_bickleyjet_dg_roe"
    command:
      - "julia --color=yes --project=examples examples/bickleyjet/bickleyjet_dg.jl roe"
    artifact_paths:
      - "examples/bickleyjet/output/dg_roe/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Bickley jet DG roe noslip"
    key: "cpu_bickleyjet_dg_roe_noslip"
    command:
      - "julia --color=yes --project=examples examples/bickleyjet/bickleyjet_dg.jl roe noslip"
    artifact_paths:
      - "examples/bickleyjet/output/dg_roe_noslip/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Rising Bubble 2D hybrid"
    key: "cpu_rising_bubble_2d_hybrid"
    command:
      - "julia --color=yes --project=examples examples/hybrid/bubble_2d.jl"
    artifact_paths:
      - "examples/hybrid/output/bubble_2d/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Rising Bubble 3D hybrid"
    key: "cpu_rising_bubble_3d_hybrid"
    command:
      - "julia --color=yes --project=examples examples/hybrid/bubble_3d.jl"
    artifact_paths:
      - "examples/hybrid/output/bubble_3d/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Rising Bubble hybrid invariant"
    key: "cpu_rising_bubble_hybrid_invariant"
    command:
      - "julia --color=yes --project=examples examples/hybrid/bubble_invariant.jl"
    artifact_paths:
      - "examples/hybrid/output/bubble_invariant/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Rising Bubble 3D hybrid invariant"
    key: "cpu_rising_bubble_3d_hybrid_invariant"
    command:
      - "julia --color=yes --project=examples examples/hybrid/bubble3d_invariant.jl"
    artifact_paths:
      - "examples/hybrid/output/bubble3d_invariant/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Solid body CG sphere cosine bell alpha0"
    key: "cpu_solidbody_cg_sphere_cosine_bell_alpha0"
    command:
      - "julia --color=yes --project=examples examples/sphere/solidbody.jl"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_solidbody_cosine_bell_alpha0/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Solid body CG sphere cosine bell alpha45"
    key: "cpu_solidbody_cg_sphere_cosine_bell_alpha45"
    command:
      - "julia --color=yes --project=examples examples/sphere/solidbody.jl cosine_bell alpha45"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_solidbody_cosine_bell_alpha45/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Solid body CG sphere gaussian bell alpha0"
    key: "cpu_solidbody_cg_sphere_gaussian_bell_alpha0"
    command:
      - "julia --color=yes --project=examples examples/sphere/solidbody.jl gaussian_bell"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_solidbody_gaussian_bell_alpha0/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Solid body CG sphere gaussian bell alpha45"
    key: "cpu_solidbody_cg_sphere_gaussian_bell_alpha45"
    command:
      - "julia --color=yes --project=examples examples/sphere/solidbody.jl gaussian_bell alpha45"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_solidbody_gaussian_bell_alpha45/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Steady-state shallow water 2D CG sphere alpha0"
    key: "cpu_shallowwater_2d_cg_sphere_alpha0"
    command:
      - "julia --color=yes --project=examples examples/sphere/shallow_water.jl"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_shallowwater_steady_state_alpha0/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Steady-state shallow water 2D CG sphere alpha45"
    key: "cpu_shallowwater_2d_cg_sphere_alpha45"
    command:
      - "julia --color=yes --project=examples examples/sphere/shallow_water.jl steady_state alpha45"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_shallowwater_steady_state_alpha45/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Steady-state shallow water 2D CG sphere with compact support alpha0"
    key: "cpu_shallowwater_2d_cg_sphere_compact_alpha0"
    command:
      - "julia --color=yes --project=examples examples/sphere/shallow_water.jl steady_state_compact"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_shallowwater_steady_state_compact_alpha0/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Steady-state shallow water 2D CG sphere with compact support alpha60"
    key: "cpu_shallowwater_2d_cg_sphere_compact_alpha60"
    command:
      - "julia --color=yes --project=examples examples/sphere/shallow_water.jl steady_state_compact alpha60"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_shallowwater_steady_state_compact_alpha60/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Shallow water 2D CG sphere barotropic instability alpha0"
    key: "cpu_shallowwater_2d_cg_sphere_barotropic_alpha0"
    command:
      - "julia --color=yes --project=examples examples/sphere/shallow_water.jl barotropic_instability"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_shallowwater_barotropic_instability_alpha0/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Shallow water 2D CG sphere barotropic instability alpha30"
    key: "cpu_shallowwater_2d_cg_sphere_barotropic_alpha30"
    command:
      - "julia --color=yes --project=examples examples/sphere/shallow_water.jl barotropic_instability alpha30"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_shallowwater_barotropic_instability_alpha30/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Non-uniform shallow water 2D CG sphere alpha0"
    key: "cpu_nonuniform_shallowwater_2d_cg_sphere"
    command:
      - "julia --color=yes --project=examples examples/sphere/shallow_water.jl mountain"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_shallowwater_mountain_alpha0/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: Rossby Haurwitz 2D CG sphere"
    key: "cpu_rossbyhaurwitz_2d_cg_sphere"
    command:
      - "julia --color=yes --project=examples examples/sphere/shallow_water.jl rossby_haurwitz"
    artifact_paths:
      - "examples/sphere/output/cg_sphere_shallowwater_rossby_haurwitz_alpha0/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: 3D deformation flow"
    key: "cpu_3d_deformation_flow"
    command:
      - "julia --color=yes --project=examples examples/3dsphere/deformation_flow.jl"
    artifact_paths:
      - "examples/3dsphere/output/deformation_flow/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: baroclinic wave"
    key: "cpu_baroclinic_wave"
    command:
      - "julia --color=yes --project=examples examples/3dsphere/baroclinic_wave.jl"
    artifact_paths:
      - "examples/3dsphere/output/baroclinic_wave/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: baroclinic wave rho etot implicit"
    key: "cpu_baroclinic_wave_rho_etot_imp"
    command:
      - "julia --color=yes --project=examples examples/3dsphere/baroclinic_wave_rho_etot.jl"
    artifact_paths:
      - "examples/3dsphere/output/baroclinic_wave_rho_etot_implicit/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: baroclinic wave rho theta implicit"
    key: "cpu_baroclinic_wave_rho_theta_imp"
    command:
      - "julia --color=yes --project=examples examples/3dsphere/baroclinic_wave_rho_theta.jl"
    artifact_paths:
      - "examples/3dsphere/output/baroclinic_wave_rho_theta_implicit/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: nonhydrostatic gravity wave"
    key: "cpu_nonhydrostatic_gravity_wave"
    command:
      - "julia --color=yes --project=examples examples/3dsphere/nonhydrostatic_gravity_wave.jl"
    artifact_paths:
      - "examples/3dsphere/output/nonhydrostatic_gravity_wave/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: solid body rotation"
    key: "cpu_solid_body_rotation"
    command:
      - "julia --color=yes --project=examples examples/3dsphere/solid_body_rotation_3d.jl"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: hydrostatically and geostrophically balanced flow"
    key: "cpu_balanced_flow"
    command:
      - "julia --color=yes --project=examples examples/3dsphere/baroclinic_wave.jl balanced_flow"
    artifact_paths:
      - "examples/3dsphere/output/balanced_flow/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: dry held-suarez rho etot implicit"
    key: "cpu_held_suarez_rho_etot_imp"
    command:
      - "julia --color=yes --project=examples examples/3dsphere/held_suarez_rho_etot.jl"
    artifact_paths:
      - "examples/3dsphere/output/held_suarez_rho_etot_implicit/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":computer: dry held-suarez rho theta implicit"
    key: "cpu_held_suarez_rho_theta_imp"
    command:
      - "julia --color=yes --project=examples examples/3dsphere/held_suarez_rho_theta.jl"
    artifact_paths:
      - "examples/3dsphere/output/held_suarez_rho_theta_implicit/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":rocket::computer: Allocations analysis"
    key: "cpu_allocations"
    command:
      - "julia --color=yes --project=perf perf/allocs.jl"
    artifact_paths:
      - "perf/allocations_output/*"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1

  - label: ":rocket::computer: Flamegraph profile"
    key: "cpu_flamegraph"
    depends_on: "cpu_allocations"
    allow_dependency_failure: true
    env:
      CI_PERF_CPUPROFILE: "true"
    command:
      - "julia --color=yes --project=perf perf/flame.jl"
    artifact_paths:
      - "perf/output/*.cpuprofile"
    agents:
      config: cpu
      queue: central
      slurm_ntasks: 1
