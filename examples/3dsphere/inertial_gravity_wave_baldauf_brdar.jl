using Logging: global_logger
using TerminalLoggers: TerminalLogger
global_logger(TerminalLogger())

import ClimaCore: enable_threading
enable_threading() = true

using OrdinaryDiffEq
using ClimaCorePlots, Plots

using ClimaCore:
    Geometry, Domains, Meshes, Topologies, Spaces, Fields, Operators

##
## Parameters
##

const FT = Float64
const is_small_scale = true

const x_center = is_small_scale ? FT(100e3) : FT(3000e3)              # m
const d = is_small_scale ? FT(5e3) : FT(100e3)                        # m
const f = is_small_scale ? FT(0) : 2 * sin(œÄ / 4) * 2œÄ / FT(86164.09) # 1/s
const u‚ÇÄ = is_small_scale ? FT(20) : FT(0)                            # m/s
const v‚ÇÄ = FT(0)                                                      # m/s
const w‚ÇÄ = FT(0)                                                      # m/s
const T‚ÇÄ = FT(250)                                                    # K
const ŒîT = FT(0.01)                                                   # K
const p‚ÇÄ_surface = FT(1e5)                                            # kg/m/s^2
const g = FT(9.80665)                                                 # m/s^2
const R = FT(287.05)                                                  # J/kg/K
const c‚Çö = FT(1005.0)                                                 # J/kg/K
const c·µ• = c‚Çö - R                                                     # J/kg/K

const xmax = is_small_scale ? FT(300e3) : FT(6000e3)
const zmax = FT(10e3)
Œîx = is_small_scale ? FT(250) : FT(5000)
Œîz = is_small_scale ? Œîx / 2 : Œîx / 40
npoly = 4
helem = Int(xmax / (Œîx * (npoly + 1)))
velem = Int(zmax / Œîz)

tmax = is_small_scale ? FT(60 * 60 * 0.5) : FT(60 * 60 * 8)
dt = is_small_scale ? FT(0.5) : FT(75)
save_every_n_steps = 1
ode_algorithm = OrdinaryDiffEq.SSPRK33

##
## Domain
##

hdomain = Domains.IntervalDomain(
    Geometry.XPoint{FT}(zero(FT)),
    Geometry.XPoint{FT}(xmax);
    periodic = true,
)
hmesh = Meshes.IntervalMesh(hdomain; nelems = helem)
htopology = Topologies.IntervalTopology(hmesh)
quad = Spaces.Quadratures.GLL{npoly + 1}()
hspace = Spaces.SpectralElementSpace1D(htopology, quad)

vdomain = Domains.IntervalDomain(
    Geometry.ZPoint{FT}(zero(FT)),
    Geometry.ZPoint{FT}(zmax);
    boundary_tags = (:bottom, :top),
)
vmesh = Meshes.IntervalMesh(vdomain, nelems = velem)
vspace = Spaces.CenterFiniteDifferenceSpace(vmesh)

center_space = Spaces.ExtrudedFiniteDifferenceSpace(hspace, vspace)
face_space = Spaces.FaceExtrudedFiniteDifferenceSpace(center_space)

##
## Initial state
##

# This assumes a uniform value of Œîz and T‚ÇÄ.
# @‚àÇz_c2f(p) / I_c2f(œÅ) + g = 0 ==>
# @‚àÇz_c2f(p) = -g * I_c2f(œÅ) ==>
# (p_{i + 1} - p_i)/Œîz = -g/2 * (œÅ_{i + 1} + œÅ_i)
# p = œÅRT‚ÇÄ ==>
# (p_{i + 1} - p_i)/Œîz = -g/2RT‚ÇÄ * (p_{i + 1} + p_i) ==>
# p_{i + 1} = p_i * (1 - gŒîz/2RT‚ÇÄ)/(1 + gŒîz/2RT‚ÇÄ) ==>
# p_{i + 1} = p_1 * ((1 - gŒîz/2RT‚ÇÄ)/(1 + gŒîz/2RT‚ÇÄ))^i
# p_{i + 1} = p(Œîz * (i + 1/2)) ==>
# p(z) = p_{z/Œîz + 1/2} = p_1 * ((1 - gŒîz/2RT‚ÇÄ)/(1 + gŒîz/2RT‚ÇÄ))^(z/Œîz - 1/2) =
#     = p(0) * ((1 - gŒîz/2RT‚ÇÄ)/(1 + gŒîz/2RT‚ÇÄ))^(z/Œîz)

function initial_state_c(local_geometry)
    (; x, z) = local_geometry.coordinates

    # Continuous hydrostatic balance
    # p = p‚ÇÄ_surface * exp(-g * z / (R * T‚ÇÄ))

    # Discrete hydrostatic balance
    Œîz = FT(125) # non-constant global variable...
    value = g * Œîz / (2 * R * T‚ÇÄ)
    p = p‚ÇÄ_surface * ((1 - value)/(1 + value))^(z / Œîz)

    T = T‚ÇÄ # + exp(g * z / (2 * R * T‚ÇÄ)) * ŒîT * exp(-(x - x_center)^2 / d^2) *
        # sin(œÄ * z / zmax)
    return (; u = u‚ÇÄ, v = v‚ÇÄ, p, œÅ = p / (R * T))
end
initial_state_f(local_geometry) = (; w = w‚ÇÄ)

Y = Fields.FieldVector(
    c = map(initial_state_c, Fields.local_geometry_field(center_space)),
    f = map(initial_state_f, Fields.local_geometry_field(face_space)),
)

##
## Tendency
##

const I_f2c = Operators.InterpolateF2C()
const I_c2f = Operators.InterpolateC2F(
    bottom = Operators.Extrapolate(),
    top = Operators.Extrapolate(),
)
const ‚àá‚Çï = Operators.Gradient()
const ‚àá·µ•_f2c = Operators.GradientF2C()
const ‚àá·µ•_c2f = Operators.GradientC2F(
    bottom = Operators.SetGradient(Geometry.Covariant3Vector(FT(0))),
    top = Operators.SetGradient(Geometry.Covariant3Vector(FT(0))),
)
const B = Operators.SetBoundaryOperator(
    bottom = Operators.SetValue(FT(0)),
    top = Operators.SetValue(FT(0)),
)

macro ‚àÇx(field)
    esc(:(getproperty.(Geometry.UVector.(‚àá‚Çï.($field)), :u)))
end
macro ‚àÇz_f2c(field)
    esc(:(getproperty.(Geometry.WVector.(‚àá·µ•_f2c.($field)), :w)))
end
macro ‚àÇz_c2f(field)
    esc(:(getproperty.(Geometry.WVector.(‚àá·µ•_c2f.($field)), :w)))
end

cache = (; c = (; B_g = @. B(one(Y.f.w) * g)))

function tendency!(Y‚Çú, Y, cache, t)
    @. Y‚Çú.c.u = -Y.c.u * @‚àÇx(Y.c.u) - @‚àÇx(Y.c.p) / Y.c.œÅ + f * Y.c.v
    @. Y‚Çú.c.u += -I_f2c(Y.f.w * @‚àÇz_c2f(Y.c.u))
    
    @. Y‚Çú.c.v = -Y.c.u * @‚àÇx(Y.c.v) - f * Y.c.u
    @. Y‚Çú.c.v += -I_f2c(Y.f.w * @‚àÇz_c2f(Y.c.v))
    
    # temporarily store ‚àÇw/‚àÇx in Y‚Çú.f.w to avoid BroadcastStyle conflict
    ‚àÇw‚àÇx = Y‚Çú.f.w 
    @. ‚àÇw‚àÇx = @‚àÇx(Y.f.w)
    @. Y‚Çú.f.w = -I_c2f(Y.c.u) * ‚àÇw‚àÇx - Y.f.w * I_c2f(@‚àÇz_f2c(Y.f.w)) -
        @‚àÇz_c2f(Y.c.p) / I_c2f(Y.c.œÅ) - cache.c.B_g
    
    # temporarily store DœÅ/Dt = ‚àÇœÅ/‚àÇt + ùêÆ‚ãÖ‚àáœÅ in Y‚Çú.c.œÅ to avoid recomputation
    DœÅDt = Y‚Çú.c.œÅ
    @. DœÅDt = -Y.c.œÅ * @‚àÇx(Y.c.u)
    @. DœÅDt += -Y.c.œÅ * @‚àÇz_f2c(Y.f.w)
    
    @. Y‚Çú.c.p = -Y.c.u * @‚àÇx(Y.c.p) + c‚Çö / c·µ• * Y.c.p / Y.c.œÅ * DœÅDt
    @. Y‚Çú.c.p += -I_f2c(Y.f.w * @‚àÇz_c2f(Y.c.p))
    
    @. Y‚Çú.c.œÅ = -Y.c.u * @‚àÇx(Y.c.œÅ) + DœÅDt
    @. Y‚Çú.c.œÅ += -I_f2c(Y.f.w * @‚àÇz_c2f(Y.c.œÅ))

    Spaces.weighted_dss!(Y‚Çú.c)
    Spaces.weighted_dss!(Y‚Çú.f)
    return Y‚Çú
end

##
## ODE solver
##

problem = ODEProblem(
    ODEFunction(tendency!; tgrad = (Y‚Çú, Y, p, t) -> (Y‚Çú .= FT(0))),
    Y,
    (FT(0), tmax),
    cache,
)
integrator = OrdinaryDiffEq.init(
    problem,
    ode_algorithm();
    dt = dt,
    saveat = dt * save_every_n_steps,
    adaptive = false,
    progress = true,
    progress_steps = 1,
)
sol = @timev OrdinaryDiffEq.solve!(integrator)

##
## Post-processing
##

# ENV["GKSwstype"] = "nul"
# path = joinpath(@__DIR__, "output", "inertial_gravity_wave")
# get_T(Y) = @. Y.c.p / (R * Y.c.œÅ)

Y‚Çú = similar(Y)
tendency!(Y‚Çú, Y, cache, FT(0))

for symbol in propertynames(Y‚Çú.c)
    println(
        "The integral of Y‚Çú.c.$symbol across the domain at t = 0 is ",
        sum(getproperty(Y‚Çú.c, symbol)),
    )
end
println("The integral of Y‚Çú.f.w across the domain at t = 0 is ", sum(Y‚Çú.f.w))
println("The value of Y‚Çú.f.w at t = 0 is ", Y‚Çú.f.w)
plot(Y‚Çú.f.w)
