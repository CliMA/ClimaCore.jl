using Test
using StaticArrays, IntervalSets, LinearAlgebra, UnPack

import ClimaCore:
    ClimaCore,
    slab,
    Spaces,
    Domains,
    Meshes,
    Geometry,
    Topologies,
    Spaces,
    Fields,
    Operators,
    Hypsography
using ClimaCore.Geometry
using ClimaCore.Utilities: half
using ClimaCore.Meshes: GeneralizedExponentialStretching

using DiffEqCallbacks

using Logging: global_logger
using TerminalLoggers: TerminalLogger
global_logger(TerminalLogger())


### This file follows the test problem described in 
# https://doi.org/10.1175/1520-0493(2002)130<2459:ANTFVC>2.0.CO;2
# Section 3(b)

const MSLP = 1e5 # mean sea level pressure
const grav = 9.8 # gravitational constant
const R_d = 287.058 # R dry (gas constant / mol mass dry air)
const Œ≥ = 1.4 # heat capacity ratio
const C_p = R_d * Œ≥ / (Œ≥ - 1) # heat capacity at constant pressure
const C_v = R_d / (Œ≥ - 1) # heat capacity at constant volumehttps://clima.github.io/Thermodynamics.jl/dev/DevDocs/
const T_0 = 273.16 # triple point temperature
const kinematic_viscosity = 0.0 #m¬≤/s
const hyperdiffusivity = 2e7 #m¬≤/s

function warp_schar(coord)
    x = Geometry.component(coord, 1)
    FT = eltype(x)
    a = 5000
    Œª = 4000
    h‚ÇÄ = 250.0
    if abs(x) <= a
        h = h‚ÇÄ * exp(-(x / a)^2) * (cos(œÄ * x / Œª))^2
    else
        h = FT(0)
    end
end

function warp_agnesi(coord)
    x = coord.x
    h‚ÇÄ = 1
    a = 1000
    return h‚ÇÄ * a^2 / (x^2 + a^2)
end

const nx = 32
const nz = 40
const np = 4
const Lx = 120000
const Lz = 25000

function hvspace_2D(
    xlim = (-œÄ, œÄ),
    zlim = (0, 4œÄ),
    xelem = nx,
    zelem = nz,
    npoly = np,
    warp_fn = warp_schar,
)
    FT = Float64
    vertdomain = Domains.IntervalDomain(
        Geometry.ZPoint{FT}(zlim[1]),
        Geometry.ZPoint{FT}(zlim[2]);
        boundary_names = (:bottom, :top),
    )
    #vertmesh = Meshes.IntervalMesh(vertdomain, GeneralizedExponentialStretching(500.0, 5000.0), nelems = zelem)
    vertmesh = Meshes.IntervalMesh(vertdomain, nelems = zelem)
    vert_face_space = Spaces.FaceFiniteDifferenceSpace(vertmesh)

    horzdomain = Domains.IntervalDomain(
        Geometry.XPoint{FT}(xlim[1]),
        Geometry.XPoint{FT}(xlim[2]);
        periodic = true,
    )
    horzmesh = Meshes.IntervalMesh(horzdomain, nelems = xelem)
    horztopology = Topologies.IntervalTopology(horzmesh)
    quad = Spaces.Quadratures.GLL{npoly + 1}()
    horzspace = Spaces.SpectralElementSpace1D(horztopology, quad)

    z_surface = warp_fn.(Fields.coordinate_field(horzspace))
    hv_face_space = Spaces.ExtrudedFiniteDifferenceSpace(
        horzspace,
        vert_face_space,
        Hypsography.LinearAdaption(),
        z_surface,
    )
    hv_center_space = Spaces.CenterExtrudedFiniteDifferenceSpace(hv_face_space)
    return (hv_center_space, hv_face_space)
end

# set up 2D domain - doubly periodic box
hv_center_space, hv_face_space = hvspace_2D((-Lx / 2, Lx / 2), (0, Lz))

Œ¶(z) = grav * z

# Reference: https://journals.ametsoc.org/view/journals/mwre/140/4/mwr-d-10-05073.1.xml, Section 5a
# Prognostic thermodynamic variable: Total Energy 
function init_advection_over_mountain(x, z)
    Œ∏‚ÇÄ = 280.0
    cp_d = C_p
    cv_d = C_v
    p‚ÇÄ = MSLP
    g = grav

    ùí© = 0.01
    Œ∏ = @. Œ∏‚ÇÄ * exp(ùí©^2 * z / g)
    œÄ_exner = @. 1 + g^2 / ùí©^2 / cp_d / Œ∏‚ÇÄ * (exp(-ùí©^2 * z / g) - 1)
    T = @. œÄ_exner * Œ∏ # temperature
    œÅ = @. p‚ÇÄ / (R_d * Œ∏) * (œÄ_exner)^(cp_d / R_d)
    e = @. cv_d * (T - T_0) + Œ¶(z) + 50.0
    œÅe = @. œÅ * e
    œÅq = @. œÅ * 0.0
    return (œÅ = œÅ, œÅe = œÅe, œÅq = œÅq)
end

function initial_velocity(x, z)
    FT = eltype(x)
    return @. Geometry.UWVector(FT(10), FT(0))
end

# initial conditions
coords = Fields.coordinate_field(hv_center_space)
face_coords = Fields.coordinate_field(hv_face_space)

# Assign initial conditions to cell center, cell face variables
# Group scalars (œÅ, œÅe) in Yc 
# Retain u‚Çï and w as separate components of velocity vector (primitive variables)
Yc = map(coord -> init_advection_over_mountain(coord.x, coord.z), coords)
u‚Çï_local = map(coord -> initial_velocity(coord.x, coord.z), coords)
w = map(_ -> Geometry.Covariant3Vector(0.0), face_coords)
u‚Çï = Geometry.Covariant1Vector.(u‚Çï_local)

const u_init = u‚Çï

·∂úlg = Fields.local_geometry_field(hv_center_space)
·∂†lg = Fields.local_geometry_field(hv_face_space)

Y = Fields.FieldVector(Yc = Yc, u‚Çï = u‚Çï, w = w)

Spaces.weighted_dss!(Y.Yc)
Spaces.weighted_dss!(Y.u‚Çï)
Spaces.weighted_dss!(Y.w)
Spaces.weighted_dss!(u_init)

energy_0 = sum(Y.Yc.œÅe)
mass_0 = sum(Y.Yc.œÅ)

function rayleigh_sponge(
    z;
    z_sponge = 12500.0,
    z_max = 25000.0,
    Œ± = 0.5,  # Relaxation timescale
    œÑ = 0.5,
    Œ≥ = 2.0,
)
    if z >= z_sponge
        r = (z - z_sponge) / (z_max - z_sponge)
        Œ≤_sponge = Œ± * sinpi(œÑ * r)^Œ≥
        return Œ≤_sponge
    else
        return eltype(z)(0)
    end
end
function rayleigh_sponge_x(
    x;
    x_sponge = 20000,
    x_max = 30000,
    Œ± = 0.5,  # Relaxation timescale
    œÑ = 0.5,
    Œ≥ = 2.0,
)
    if abs(x) >= x_sponge
        r = (abs(x) - x_sponge) / (x_max - x_sponge)
        Œ≤_sponge = Œ± * sinpi(œÑ * r)^Œ≥
        return Œ≤_sponge
    else
        return eltype(x)(0)
    end
end

function rhs_invariant!(dY, Y, _, t)

    cœÅ = Y.Yc.œÅ # scalar on centers
    fw = Y.w # Covariant3Vector on faces
    cu‚Çï = Y.u‚Çï # Covariant1Vector on centers
    cœÅe = Y.Yc.œÅe
    cœÅq = Y.Yc.œÅq

    dœÅ = dY.Yc.œÅ
    dw = dY.w
    du‚Çï = dY.u‚Çï
    dœÅe = dY.Yc.œÅe
    dœÅq = dY.Yc.œÅq
    z = coords.z
    fz = face_coords.z
    fx = face_coords.x

    # 0) update w at the bottom

    hdiv = Operators.Divergence()
    hwdiv = Operators.WeakDivergence()
    hgrad = Operators.Gradient()
    hwgrad = Operators.WeakGradient()
    hcurl = Operators.Curl()

    # get u_cov at first interior cell center
    # constant extrapolation to bottom face 
    # apply as boundary condition on w for interpolation operator 

    If2c = Operators.InterpolateF2C()
    Ic2f = Operators.InterpolateC2F(
        bottom = Operators.Extrapolate(),
        top = Operators.Extrapolate(),
    )

    f_upwind_product1 = Operators.UpwindBiasedProductC2F()
    f_upwind_product3 = Operators.Upwind3rdOrderBiasedProductC2F(
        bottom = Operators.FirstOrderOneSided(),
        top = Operators.FirstOrderOneSided(),
    )

    dœÅ .= 0 .* cœÅ

    cw = If2c.(fw)
    fu‚Çï = Ic2f.(cu‚Çï)

    u‚ÇÅ_bc =
        Geometry.contravariant3.(
            Fields.level(fu‚Çï, ClimaCore.Utilities.half),
            Fields.level(
                Fields.local_geometry_field(hv_face_space),
                ClimaCore.Utilities.half,
            ),
        )
    # Calculate g^{33} == Generate contravariant3 representation with only non-zero covariant3 
    # u^3 = g^31 u_1 + g^32 u_2 + g^33 u_3
    g‚Å± ≤ =
        Fields.level(
            Fields.local_geometry_field(hv_face_space),
            ClimaCore.Utilities.half,
        ).g‚Å± ≤
    g33 = g‚Å± ≤.components.data.:4
    u‚ÇÉ_bc = Geometry.Covariant3Vector.(-1 .* u‚ÇÅ_bc ./ g33)  # fw = -g^31 cu‚Çï/ g^33
    apply_boundary_w =
        Operators.SetBoundaryOperator(bottom = Operators.SetValue(u‚ÇÉ_bc))
    @. fw = apply_boundary_w(fw)

    cuw = @. Geometry.Covariant13Vector(cu‚Çï) + Geometry.Covariant13Vector(cw)

    fuw = @. Ic2f(cuw)

    ce = @. cœÅe / cœÅ
    cq = @. cœÅq / cœÅ
    cI = @. ce - Œ¶(z) - (norm(cuw)^2) / 2
    cT = @. cI / C_v + T_0
    cp = @. cœÅ * R_d * cT

    h_tot = @. ce + cp / cœÅ # Total enthalpy at cell centers

    ### HYPERVISCOSITY
    # 1) compute hyperviscosity coefficients
    œáe = @. dœÅe = hwdiv(hgrad(h_tot)) # we store œáe in dœÅe
    œáq = @. dœÅq = hwdiv(hgrad(cq)) # we store œáe in dœÅe
    œáu‚Çï = @. du‚Çï = hwgrad(hdiv(cu‚Çï))

    Spaces.weighted_dss!(dœÅe)
    Spaces.weighted_dss!(du‚Çï)
    Spaces.weighted_dss!(dœÅq)

    Œ∫‚ÇÑ_dynamic = hyperdiffusivity # m^4/s
    Œ∫‚ÇÑ_tracer = hyperdiffusivity * 0
    @. dœÅe = -Œ∫‚ÇÑ_dynamic * hwdiv(cœÅ * hgrad(œáe))
    @. dœÅq = -Œ∫‚ÇÑ_tracer * hwdiv(cœÅ * hgrad(œáq))
    @. du‚Çï = -Œ∫‚ÇÑ_dynamic * (hwgrad(hdiv(œáu‚Çï)))

    # 1) Mass conservation
    dw .= fw .* 0

    # 1.a) horizontal divergence
    dœÅ .-= hdiv.(cœÅ .* (cuw))

    # 1.b) vertical divergence

    # Apply n ‚ãÖ ‚àá(X) = F
    # n^{i} * ‚àÇX/‚àÇ_{x^{i}} 
    # Contravariant3Vector(1) ‚äó (Flux Tensor)

    vdivf2c = Operators.DivergenceF2C(
        top = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
        bottom = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
    )
    vdivc2f = Operators.DivergenceC2F(
        top = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
        bottom = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
    )
    # we want the total u¬≥ at the boundary to be zero: we can either constrain
    # both to be zero, or allow one to be non-zero and set the other to be its
    # negation

    # explicit part
    dœÅ .-= vdivf2c.(Ic2f.(cœÅ .* cu‚Çï))
    # implicit part
    dœÅ .-= vdivf2c.(Ic2f.(cœÅ) .* fw)

    # 2) Momentum equation

    # curl term
    hcurl = Operators.Curl()
    # effectively a homogeneous Neumann condition on u‚ÇÅ at the boundary
    vcurlc2f = Operators.CurlC2F(
        bottom = Operators.SetCurl(Geometry.Contravariant2Vector(0.0)),
        top = Operators.SetCurl(Geometry.Contravariant2Vector(0.0)),
    )

    fœâ¬π = hcurl.(fw)
    fœâ¬π .+= vcurlc2f.(cu‚Çï)

    # cross product
    # convert to contravariant
    # these will need to be modified with topography

    fu¬π = @. Geometry.project(Geometry.Contravariant1Axis(), fuw)
    fu¬≥ = @. Geometry.project(Geometry.Contravariant3Axis(), fuw)

    @. dw -= fœâ¬π √ó fu¬π # Covariant3Vector on faces
    @. du‚Çï -= If2c(fœâ¬π √ó fu¬≥)
    @. du‚Çï -= hgrad(cp) / cœÅ

    vgradc2fP = Operators.GradientC2F(
        bottom = Operators.SetGradient(Geometry.Covariant3Vector(0.0)),
        top = Operators.SetGradient(Geometry.Covariant3Vector(0.0)),
    )
    vgradc2fE = Operators.GradientC2F(
        bottom = Operators.SetGradient(Geometry.Covariant3Vector(0.0)),
        top = Operators.SetGradient(Geometry.Covariant3Vector(0.0)),
    )

    cE = @. (norm(cuw)^2) / 2 + Œ¶(z)
    @. du‚Çï -= hgrad(cE)
    @. dw -= vgradc2fE(cE)

    @. dw -= vgradc2fP(cp) / Ic2f(cœÅ)

    # 3) total energy

    @. dœÅe -= hdiv(cuw * (cœÅe + cp))

    @. dœÅe -= vdivf2c(fw * Ic2f(cœÅe + cp))
    #@. dœÅe -= vdivf2c(Ic2f(cœÅ) * f_upwind_product1(fw, (cœÅe + cp)/cœÅ)) # Upwind Approximation - First Order
    #@. dœÅe -= vdivf2c(Ic2f(cœÅ) * f_upwind_product3(fw, (cœÅe + cp)/cœÅ)) # Upwind Approximation - Third Order

    @. dœÅe -= vdivf2c(Ic2f(cu‚Çï * (cœÅe + cp)))

    # 4) tracer tendencies  
    # In extruded grids
    @. dœÅq -= hdiv(cuw * (cœÅq))
    @. dœÅq -= vdivf2c(fw * Ic2f(cœÅq))
    @. dœÅq -= vdivf2c(Ic2f(cu‚Çï * (cœÅq)))

    # Uniform 2nd order diffusion
    ‚àÇc = Operators.GradientF2C()
    fœÅ = @. Ic2f(cœÅ)
    Œ∫‚ÇÇ = kinematic_viscosity # m^2/s

    # Sponge tendency
    Œ≤ = @. rayleigh_sponge(z)
    Œ≤f = @. rayleigh_sponge(fz)
    @. du‚Çï -= Œ≤ * (u‚Çï - u_init)
    @. dw -= Œ≤f * fw

    Spaces.weighted_dss!(dY.Yc)
    Spaces.weighted_dss!(dY.u‚Çï)
    Spaces.weighted_dss!(dY.w)

    return dY
end
dYdt = similar(Y);
rhs_invariant!(dYdt, Y, nothing, 0.0);

# run!
using OrdinaryDiffEq
Œît = min(Lx / nx / np / 300, Lz / nz / 300) * 0.50
@show Œît

timeend = 3600.0 * 15.0
function make_dss_func()
    _dss!(x::Fields.Field) = Spaces.weighted_dss!(x)
    _dss!(::Any) = nothing
    dss_func(Y, t, integrator) = foreach(_dss!, Fields._values(Y))
    return dss_func
end
dss_func = make_dss_func()
dss_callback = FunctionCallingCallback(dss_func, func_start = true)
prob = ODEProblem(rhs_invariant!, Y, (0.0, timeend))
integrator = OrdinaryDiffEq.init(
    prob,
    SSPRK33(),
    dt = Œît,
    saveat = 500.0,
    progress = true,
    progress_message = (dt, u, p, t) -> t,
    callback = dss_callback,
);

if haskey(ENV, "CI_PERF_SKIP_RUN") # for performance analysis
    throw(:exit_profile)
end

sol = @timev OrdinaryDiffEq.solve!(integrator)

ENV["GKSwstype"] = "nul"
import Plots, ClimaCorePlots
Plots.GRBackend()

dir = "schar_etot_nh"
path = joinpath(@__DIR__, "output", dir)
mkpath(path)

tendency_plots = false

if tendency_plots
    anim = Plots.@animate for u in sol.u
        Y = u
        cœÅ = Y.Yc.œÅ # scalar on centers
        fw = Y.w # Covariant3Vector on faces
        cu‚Çï = Y.u‚Çï # Covariant1Vector on centers
        cœÅe = Y.Yc.œÅe
        cœÅq = Y.Yc.œÅq
        z = coords.z

        hdiv = Operators.Divergence()
        hwdiv = Operators.WeakDivergence()
        hgrad = Operators.Gradient()
        hwgrad = Operators.WeakGradient()
        hcurl = Operators.Curl()

        If2c = Operators.InterpolateF2C()
        Ic2f = Operators.InterpolateC2F(
            bottom = Operators.Extrapolate(),
            top = Operators.Extrapolate(),
        )

        # 1.b) vertical divergence
        vgradc2f = Operators.GradientC2F(
            bottom = Operators.SetGradient(Geometry.Contravariant3Vector(0.0)),
            top = Operators.SetGradient(Geometry.Contravariant3Vector(0.0)),
        )
        # curl term
        hcurl = Operators.Curl()
        # effectively a homogeneous Neumann condition on u‚ÇÅ at the boundary
        vcurlc2f = Operators.CurlC2F(
            bottom = Operators.SetCurl(Geometry.Contravariant2Vector(0.0)),
            top = Operators.SetCurl(Geometry.Contravariant2Vector(0.0)),
        )
        vdivf2c = Operators.DivergenceF2C(
            top = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
            bottom = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
        )
        vdivc2f = Operators.DivergenceC2F(
            top = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
            bottom = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
        )

        cw = @. If2c(fw)
        fu‚Çï = @. Ic2f(cu‚Çï)
        cuw =
            Geometry.Covariant13Vector.(cu‚Çï) .+ Geometry.Covariant13Vector.(cw)
        ce = @. cœÅe / cœÅ
        cq = @. cœÅq / cœÅ
        cI = @. ce - Œ¶(z) - (norm(cuw)^2) / 2
        cT = @. cI / C_v + T_0
        cpressure = @. cœÅ * R_d * cT
        h_tot = @. ce + cpressure / cœÅ # Total enthalpy at cell centers
        #######################################  

        œáe = @. hwdiv(hgrad(h_tot))
        œáu‚Çï = @. hwgrad(hdiv(cuw))
        œáq = @. hwdiv(hgrad(cq))
        Spaces.weighted_dss!(œáe)
        Spaces.weighted_dss!(œáu‚Çï)
        Spaces.weighted_dss!(œáq)
        Œ∫‚ÇÑ_dynamic = hyperdiffusivity
        Œ∫‚ÇÑ_tracer = hyperdiffusivity * 0
        dœÅeh = @. -Œ∫‚ÇÑ_dynamic * hwdiv(cœÅ * hgrad(œáe))
        dœÅqh = @. -Œ∫‚ÇÑ_tracer * hwdiv(cœÅ * hgrad(œáq))
        du‚Çïh = @. -Œ∫‚ÇÑ_dynamic * (hwgrad(hdiv(œáu‚Çï)))


        fuw = @. Geometry.Covariant13Vector(fu‚Çï) +
           Geometry.Covariant13Vector(fw)
        fœâ¬≤ = hcurl.(fw)
        fœâ¬≤ .+= vcurlc2f.(cu‚Çï)

        fu¬π = Geometry.project.(Ref(Geometry.Contravariant1Axis()), fuw)
        fu¬≥ = Geometry.project.(Ref(Geometry.Contravariant3Axis()), fuw)

        cE1 = @. (norm(cuw)^2) / 2
        cE2 = @. Œ¶(z)

        dœÅ1 = @. hdiv.(cœÅ .* (cuw))
        dœÅ2 = @. vdivf2c.(Ic2f.(cœÅ .* cu‚Çï))
        dœÅ3 = @. vdivf2c.(Ic2f.(cœÅ) .* fw)

        du‚Çï1 = @. -If2c(fœâ¬≤ √ó fu¬≥)
        du‚Çï2 = @. -hgrad(cpressure) / cœÅ
        du‚Çï3 = @. -hgrad(cE1)
        du‚Çï4 = @. -hgrad(cE2)

        dw1 = @. -fœâ¬≤ √ó fu¬π # Covariant3Vector on faces
        dw2 = @. -vgradc2f(cpressure) / Ic2f(cœÅ)
        dw3 = @. -vgradc2f(cE1)
        dw4 = @. -vgradc2f(cE2)

        dœÅe1 = @. -hdiv(cuw * cœÅe)
        dœÅe2 = @. -hdiv(cuw * cpressure)
        dœÅe3 = @. -vdivf2c(fw * Ic2f(cœÅe))
        dœÅe4 = @. -vdivf2c(fw * Ic2f(cpressure))
        dœÅe5 = @. -vdivf2c(Ic2f(cu‚Çï * cœÅe))
        dœÅe6 = @. -vdivf2c(Ic2f(cu‚Çï * cpressure))

        dœÅq1 = @. -hdiv(cuw * (cœÅq))
        dœÅq2 = @. -vdivf2c(fw * Ic2f(cœÅq))
        dœÅq3 = @. -vdivf2c(Ic2f(cu‚Çï * (cœÅq)))

        p1 = Plots.plot(du‚Çï1) # Make a line plot
        p2 = Plots.plot(du‚Çï2) # Make a line plot
        p3 = Plots.plot(du‚Çï3) # Make a line plot
        p4 = Plots.plot(du‚Çï4) # Make a line plot
        Plots.plot(
            p1,
            p2,
            p3,
            p4,
            layout = (2, 2),
            legend = false,
            size = (1200, 1200),
        )
    end
    Plots.mp4(anim, joinpath(path, "tendency_uh.mp4"), fps = 20)

    anim = Plots.@animate for u in sol.u
        Y = u
        cœÅ = Y.Yc.œÅ # scalar on centers
        fw = Y.w # Covariant3Vector on faces
        cu‚Çï = Y.u‚Çï # Covariant1Vector on centers
        cœÅe = Y.Yc.œÅe
        cœÅq = Y.Yc.œÅq
        z = coords.z

        hdiv = Operators.Divergence()
        hwdiv = Operators.WeakDivergence()
        hgrad = Operators.Gradient()
        hwgrad = Operators.WeakGradient()
        hcurl = Operators.Curl()

        If2c = Operators.InterpolateF2C()
        Ic2f = Operators.InterpolateC2F(
            bottom = Operators.Extrapolate(),
            top = Operators.Extrapolate(),
        )

        # 1.b) vertical divergence
        vgradc2f = Operators.GradientC2F(
            bottom = Operators.SetGradient(Geometry.Contravariant3Vector(0.0)),
            top = Operators.SetGradient(Geometry.Contravariant3Vector(0.0)),
        )
        # curl term
        hcurl = Operators.Curl()
        # effectively a homogeneous Neumann condition on u‚ÇÅ at the boundary
        vcurlc2f = Operators.CurlC2F(
            bottom = Operators.SetCurl(Geometry.Contravariant2Vector(0.0)),
            top = Operators.SetCurl(Geometry.Contravariant2Vector(0.0)),
        )
        vdivf2c = Operators.DivergenceF2C(
            top = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
            bottom = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
        )
        vdivc2f = Operators.DivergenceC2F(
            top = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
            bottom = Operators.SetValue(Geometry.Contravariant3Vector(0.0)),
        )

        cw = @. If2c(fw)
        fu‚Çï = @. Ic2f(cu‚Çï)
        cuw =
            Geometry.Covariant13Vector.(cu‚Çï) .+ Geometry.Covariant13Vector.(cw)
        ce = @. cœÅe / cœÅ
        cq = @. cœÅq / cœÅ
        cI = @. ce - Œ¶(z) - (norm(cuw)^2) / 2
        cT = @. cI / C_v + T_0
        cpressure = @. cœÅ * R_d * cT
        h_tot = @. ce + cpressure / cœÅ # Total enthalpy at cell centers
        #######################################  

        œáe = @. hwdiv(hgrad(h_tot))
        œáu‚Çï = @. hwgrad(hdiv(cuw))
        œáq = @. hwdiv(hgrad(cq))
        Spaces.weighted_dss!(œáe)
        Spaces.weighted_dss!(œáu‚Çï)
        Spaces.weighted_dss!(œáq)
        Œ∫‚ÇÑ_dynamic = hyperdiffusivity
        Œ∫‚ÇÑ_tracer = hyperdiffusivity * 0
        dœÅeh = @. -Œ∫‚ÇÑ_dynamic * hwdiv(cœÅ * hgrad(œáe))
        dœÅqh = @. -Œ∫‚ÇÑ_tracer * hwdiv(cœÅ * hgrad(œáq))
        du‚Çïh = @. -Œ∫‚ÇÑ_dynamic * (hwgrad(hdiv(œáu‚Çï)))

        fuw = @. Geometry.Covariant13Vector(fu‚Çï) +
           Geometry.Covariant13Vector(fw)
        fœâ¬≤ = hcurl.(fw)
        fœâ¬≤ .+= vcurlc2f.(cu‚Çï)

        fu¬π = Geometry.project.(Ref(Geometry.Contravariant1Axis()), fuw)
        fu¬≥ = Geometry.project.(Ref(Geometry.Contravariant3Axis()), fuw)

        cE1 = @. (norm(cuw)^2) / 2
        cE2 = @. Œ¶(z)

        dœÅ1 = @. hdiv.(cœÅ .* (cuw))
        dœÅ2 = @. vdivf2c.(Ic2f.(cœÅ .* cu‚Çï))
        dœÅ3 = @. vdivf2c.(Ic2f.(cœÅ) .* fw)

        du‚Çï1 = @. -If2c(fœâ¬≤ √ó fu¬≥)
        du‚Çï2 = @. -hgrad(cpressure) / cœÅ
        du‚Çï3 = @. -hgrad(cE1)
        du‚Çï4 = @. -hgrad(cE2)

        dw1 = @. -fœâ¬≤ √ó fu¬π # Covariant3Vector on faces
        dw2 = @. -vgradc2f(cpressure) / Ic2f(cœÅ)
        dw3 = @. -vgradc2f(cE1)
        dw4 = @. -vgradc2f(cE2)

        dœÅe1 = @. -hdiv(cuw * cœÅe)
        dœÅe2 = @. -hdiv(cuw * cpressure)
        dœÅe3 = @. -vdivf2c(fw * Ic2f(cœÅe))
        dœÅe4 = @. -vdivf2c(fw * Ic2f(cpressure))
        dœÅe5 = @. -vdivf2c(Ic2f(cu‚Çï * cœÅe))
        dœÅe6 = @. -vdivf2c(Ic2f(cu‚Çï * cpressure))

        dœÅq1 = @. -hdiv(cuw * (cœÅq))
        dœÅq2 = @. -vdivf2c(fw * Ic2f(cœÅq))
        dœÅq3 = @. -vdivf2c(Ic2f(cu‚Çï * (cœÅq)))

        p1 = Plots.plot(dw1) # Make a line plot
        p2 = Plots.plot(dw2) # Make a line plot
        p3 = Plots.plot(dw3) # Make a line plot
        p4 = Plots.plot(dw4) # Make a line plot
        Plots.plot(
            p1,
            p2,
            p3,
            p4,
            layout = (2, 2),
            legend = false,
            size = (1200, 1200),
        )
    end
    Plots.mp4(anim, joinpath(path, "tendency_w.mp4"), fps = 20)
end

anim = Plots.@animate for u in sol.u
    Plots.plot(u.Yc.œÅe ./ u.Yc.œÅ)
end
Plots.mp4(anim, joinpath(path, "total_energy.mp4"), fps = 20)

anim = Plots.@animate for u in sol.u
    Plots.plot(u.Yc.œÅq ./ u.Yc.œÅ)
end
Plots.mp4(anim, joinpath(path, "tracer.mp4"), fps = 20)

If2c = Operators.InterpolateF2C()
anim = Plots.@animate for u in sol.u
    ·∂úuw = @. Geometry.Covariant13Vector(u.u‚Çï) +
       Geometry.Covariant13Vector(If2c(u.w))
    w = @. Geometry.project(Geometry.WAxis(), ·∂úuw)
    Plots.plot(w, ylim = (0, 12000), xlim = (-10000, 10000))
end
Plots.mp4(anim, joinpath(path, "vel_w.mp4"), fps = 20)

anim = Plots.@animate for u in sol.u
    ·∂úuw = @. Geometry.Covariant13Vector(u.u‚Çï) +
       Geometry.Covariant13Vector(If2c(u.w))
    u = @. Geometry.project(Geometry.UAxis(), ·∂úuw)
    Plots.plot(u, ylim = (0, 12000), xlim = (-10000, 10000))
end
Plots.mp4(anim, joinpath(path, "vel_u.mp4"), fps = 20)

anim = Plots.@animate for u in sol.u
    ·∂úu = @. Geometry.Covariant13Vector(u.u‚Çï)
    ·∂úw = @. Geometry.Covariant13Vector(If2c(u.w))
    w = @. Geometry.project(Geometry.Contravariant1Axis(), ·∂úu) +
       Geometry.project(Geometry.Contravariant1Axis(), ·∂úw)
    Plots.plot(w, ylim = (0, 12000), xlim = (-10000, 10000))
end
Plots.mp4(anim, joinpath(path, "ucontravariant1.mp4"), fps = 20)

Ic2f = Operators.InterpolateC2F(
    bottom = Operators.Extrapolate(),
    top = Operators.Extrapolate(),
)
anim = Plots.@animate for u in sol.u
    ·∂†u = @. Geometry.Covariant13Vector(Ic2f(u.u‚Çï))
    ·∂†w = @. Geometry.Covariant13Vector(u.w)
    ·∂†uw = @. ·∂†u + ·∂†w
    w = @. Geometry.project(Geometry.Contravariant3Axis(), ·∂†u) +
       Geometry.project(Geometry.Contravariant3Axis(), ·∂†w)
    Plots.plot(w, ylim = (0, 500), clims = (-0.001, 0.001))
end
Plots.mp4(anim, joinpath(path, "contravariant3.mp4"), fps = 20)

# post-processing
Es = [sum(u.Yc.œÅe) for u in sol.u]
Mass = [sum(u.Yc.œÅ) for u in sol.u]

Plots.png(
    Plots.plot((Es .- energy_0) ./ energy_0),
    joinpath(path, "energy_cons.png"),
)
Plots.png(
    Plots.plot((Mass .- mass_0) ./ mass_0),
    joinpath(path, "mass_cons.png"),
)


function linkfig(figpath, alt = "")
    # buildkite-agent upload figpath
    # link figure in logs if we are running on CI
    if get(ENV, "BUILDKITE", "") == "true"
        artifact_url = "artifact://$figpath"
        print("\033]1338;url='$(artifact_url)';alt='$(alt)'\a\n")
    end
end

linkfig(
    relpath(joinpath(path, "energy_cons.png"), joinpath(@__DIR__, "../..")),
    "Total Energy",
)
linkfig(
    relpath(joinpath(path, "mass_cons.png"), joinpath(@__DIR__, "../..")),
    "Mass",
)
