using Printf
using ProgressLogging
using ClimaCorePlots, Plots

# Reference paper: https://rmets.onlinelibrary.wiley.com/doi/pdf/10.1002/qj.2105

# Constants for switching between different experiment setups
const is_small_scale = true
const ·∂úùîº_name = :œÅe
const is_discrete_hydrostatic_balance = true # `false` causes large oscillations

# Constants required by "staggered_nonhydrostatic_model.jl"
const p_0 = FT(1.0e5)
const R_d = FT(287.0)
const Œ∫ = FT(2 / 7)
const T_tri = FT(273.16)
const grav = FT(9.80616)
const f = is_small_scale ? FT(0) : 2 * sin(œÄ / 4) * 2œÄ / FT(86164.09)
include("../staggered_nonhydrostatic_model.jl")

# Additional constants required for inertial gravity wave initial condition
z_max = FT(10e3)
z_stretch_scale = FT(7e3)
const x_max = is_small_scale ? FT(300e3) : FT(6000e3)
const x_mid = is_small_scale ? FT(100e3) : FT(3000e3)
const d = is_small_scale ? FT(5e3) : FT(100e3)
const u‚ÇÄ = is_small_scale ? FT(20) : FT(0)
const v‚ÇÄ = FT(0)
const T‚ÇÄ = FT(250)
const ŒîT = FT(0.01)

# Additional values required for driver
upwinding_mode = :third_order # :none to switch to centered diff

# Other convenient constants used in reference paper
const Œ¥ = grav / (R_d * T‚ÇÄ)        # Bretherton height parameter
const c‚Çõ¬≤ = cp_d / cv_d * R_d * T‚ÇÄ # speed of sound squared
const œÅ‚Çõ = p_0 / (R_d * T‚ÇÄ)        # air density at surface

# TODO: Loop over all domain setups used in reference paper
const Œîx = is_small_scale ? FT(1e3) : FT(20e3)
const Œîz = is_small_scale ? Œîx / 2 : Œîx / 40
z_elem = Int(z_max / Œîz) # default 20 vertical elements
npoly, x_elem = 1, Int(x_max / Œîx) # max small-scale dt = 1.5
# npoly, x_elem = 4, Int(x_max / (Œîx * (4 + 1))) # max small-scale dt = 0.8

# Animation-related values
animation_duration = FT(5)
fps = 2

# Set up mesh
horizontal_mesh = periodic_line_mesh(; x_max, x_elem = x_elem)

# Additional values required for driver
dt = is_small_scale ? FT(1.5) : FT(20)
t_end = is_small_scale ? FT(60 * 60 * 0.5) : FT(60 * 60 * 8)
dt_save_to_sol = t_end / (animation_duration * fps)
ode_algorithm = OrdinaryDiffEq.Rosenbrock23
jacobian_flags = (;
    ‚àÇ·∂úùîº‚Çú‚àÇ·∂†ùïÑ_mode = ·∂úùîº_name == :œÅe ? :no_‚àÇ·∂úp‚àÇ·∂úK : :exact,
    ‚àÇ·∂†ùïÑ‚Çú‚àÇ·∂úœÅ_mode = :exact,
)
show_progress_bar = true

function discrete_hydrostatic_balance!(·∂†Œîz, ·∂úŒîz, grav)

    # Y‚Çú.f.w = 0 in implicit tendency                                        ==>
    # -(·∂†grad·µ•(·∂úp) / ·∂†interp(·∂úœÅ) + ·∂†grad·µ•·∂úŒ¶) = 0                             ==>
    # ·∂†grad·µ•(·∂úp) = -grav * ·∂†interp(·∂úœÅ)                                       ==>
    # (p(z + Œîz) - p(z)) / Œîz = -grav * (œÅ(z + Œîz) + œÅ(z)) / 2               ==>
    # p(z + Œîz) + grav * Œîz * œÅ(z + Œîz) / 2 = p(z) - grav * Œîz * œÅ(z) / 2    ==>
    # p(z + Œîz) * (1 + Œ¥ * Œîz / 2) = p(z) * (1 - Œ¥ * Œîz / 2)                 ==>
    # p(z + Œîz) / p(z) = (1 - Œ¥ * Œîz / 2) / (1 + Œ¥ * Œîz / 2)                 ==>
    # p(z + Œîz) = p(z) * (1 - Œ¥ * Œîz / 2) / (1 + Œ¥ * Œîz / 2)
    ·∂úp = similar(·∂úŒîz)
    ·∂úp1 = Fields.level(·∂úp, 1)
    ·∂úŒîz1 = Fields.level(·∂úŒîz, 1)
    @. ·∂úp1 = p_0 * (1 - Œ¥ * ·∂úŒîz1 / 4) / (1 + Œ¥ * ·∂úŒîz1 / 4)
    for i in 1:(Spaces.nlevels(axes(·∂úp)) - 1)
        ·∂úpi = parent(Fields.level(·∂úp, i))
        ·∂úpi1 = parent(Fields.level(·∂úp, i + 1))
        ·∂†Œîzi1 = parent(Fields.level(·∂†Œîz, Spaces.PlusHalf(i)))
        @. ·∂úpi1 = ·∂úpi * (1 - Œ¥ * ·∂†Œîzi1 / 2) / (1 + Œ¥ * ·∂†Œîzi1 / 2)
    end
    return ·∂úp
end
Tb_init(x, z, ŒîT, x_mid, d, z_max) =
    ŒîT * exp(-(x - x_mid)^2 / d^2) * sin(œÄ * z / z_max)
T‚Ä≤_init(x, z, ŒîT, x_mid, d, z_max, Œ¥) =
    Tb_init(x, z, ŒîT, x_mid, d, z_max) * exp(Œ¥ * z / 2)
# Pressure definition, when not in discrete hydrostatic balance state
p‚ÇÄ(z) = @. p_0 * exp(-Œ¥ * z)

function center_initial_condition(·∂úlocal_geometry)
    ·∂úx = ·∂úlocal_geometry.coordinates.x
    ·∂úz = ·∂úlocal_geometry.coordinates.z
    # Correct pressure and density if in hydrostatic balance state
    if is_discrete_hydrostatic_balance
        face_space =
            Spaces.FaceExtrudedFiniteDifferenceSpace(axes(·∂úlocal_geometry))
        ·∂†Œîz = Fields.local_geometry_field(face_space).‚àÇx‚àÇŒæ.components.data.:4
        ·∂úŒîz = ·∂úlocal_geometry.‚àÇx‚àÇŒæ.components.data.:4
        ·∂úp = discrete_hydrostatic_balance!(·∂†Œîz, ·∂úŒîz, grav)
    else
        ·∂úp = @. p‚ÇÄ(·∂úz)
    end
    T = @. T‚ÇÄ + T‚Ä≤_init(·∂úx, ·∂úz, ŒîT, x_mid, d, z_max, Œ¥)
    ·∂úœÅ = @. ·∂úp / (R_d * T)
    ·∂úu‚Çï_local = @. Geometry.UVVector(u‚ÇÄ * one(·∂úz), v‚ÇÄ * one(·∂úz))
    ·∂úu‚Çï = @. Geometry.Covariant12Vector(·∂úu‚Çï_local)
    if ·∂úùîº_name == :œÅŒ∏
        ·∂úœÅŒ∏ = @. ·∂úœÅ * T * (p_0 / ·∂úp)^(R_d / cp_d)
        return NamedTuple{(:œÅ, :œÅŒ∏, :u‚Çï)}.(tuple.(·∂úœÅ, ·∂úœÅŒ∏, u‚Çï))
    elseif ·∂úùîº_name == :œÅe
        ·∂úœÅe = @. ·∂úœÅ * (cv_d * (T - T_tri) + norm_sqr(·∂úu‚Çï_local) / 2 + grav * ·∂úz)
        return NamedTuple{(:œÅ, :œÅe, :u‚Çï)}.(tuple.(·∂úœÅ, ·∂úœÅe, ·∂úu‚Çï))
    elseif ·∂úùîº_name == :œÅe_int
        ·∂úœÅe_int = @. ·∂úœÅ * cv_d * (T - T_tri)
        return NamedTuple{(:œÅ, :œÅe_int, :u‚Çï)}.(tuple.(·∂úœÅ, ·∂úœÅe_int, ·∂úu‚Çï))
    end
end

function face_initial_condition(local_geometry)
    (; x, z) = local_geometry.coordinates
    w = @. Geometry.Covariant3Vector(zero(z))
    return NamedTuple{(:w,)}.(tuple.(w))
end

function postprocessing(sol, output_dir)
    ·∂úlocal_geometry = Fields.local_geometry_field(sol.u[1].c)
    ·∂†local_geometry = Fields.local_geometry_field(sol.u[1].f)
    lin_cache = linear_solution_cache(·∂úlocal_geometry, ·∂†local_geometry)
    Y_lin = similar(sol.u[1])

    œÅ‚Ä≤ = Y -> @. Y.c.œÅ - p‚ÇÄ(·∂úlocal_geometry.coordinates.z) / (R_d * T‚ÇÄ)
    if ·∂úùîº_name == :œÅŒ∏
        T‚Ä≤ =
            Y -> @. Y.c.œÅŒ∏ / Y.c.œÅ * (pressure_œÅŒ∏(Y.c.œÅŒ∏) / p_0)^(R_d / cp_d) -
               T‚ÇÄ
    elseif ·∂úùîº_name == :œÅe
        T‚Ä≤ = Y -> begin
            ·∂úK = @. norm_sqr(C123(Y.c.u‚Çï) + C123(·∂úinterp(Y.f.w))) / 2
            ·∂úŒ¶ = Fields.coordinate_field(Y.c).z .* grav
            @. (Y.c.œÅe / Y.c.œÅ - ·∂úK - ·∂úŒ¶) / cv_d + T_tri - T‚ÇÄ
        end
    elseif ·∂úùîº_name == :œÅe_int
        T‚Ä≤ = Y -> @. Y.c.œÅe_int / Y.c.œÅ / cv_d + T_tri - T‚ÇÄ
    end
    u‚Ä≤ = Y -> @. Geometry.UVVector(Y.c.u‚Çï).components.data.:1 - u‚ÇÄ
    v‚Ä≤ = Y -> @. Geometry.UVVector(Y.c.u‚Çï).components.data.:2 - v‚ÇÄ
    w‚Ä≤ = Y -> @. Geometry.WVector(Y.f.w).components.data.:1

    for iframe in (1, length(sol.t))
        t = sol.t[iframe]
        Y = sol.u[iframe]
        linear_solution!(Y_lin, lin_cache, t)
        println("Error norms at time t = $t:")
        for (name, f) in ((:œÅ‚Ä≤, œÅ‚Ä≤), (:T‚Ä≤, T‚Ä≤), (:u‚Ä≤, u‚Ä≤), (:v‚Ä≤, v‚Ä≤), (:w‚Ä≤, w‚Ä≤))
            var = f(Y)
            var_lin = f(Y_lin)
            strings = (
                norm_strings(var, var_lin, 2)...,
                norm_strings(var, var_lin, Inf)...,
            )
            println("œï = $name: ", join(strings, ", "))
        end
        println()
    end

    anim_vars = (
        (:Tprime, T‚Ä≤, is_small_scale ? 0.014 : 0.014),
        (:uprime, u‚Ä≤, is_small_scale ? 0.042 : 0.014),
        (:wprime, w‚Ä≤, is_small_scale ? 0.0042 : 0.0014),
    )
    anims = [Animation() for _ in 1:(3 * length(anim_vars))]
    @progress "Animations" for iframe in 1:length(sol.t)
        t = sol.t[iframe]
        Y = sol.u[iframe]
        linear_solution!(Y_lin, lin_cache, t)
        for (ivar, (_, f, lim)) in enumerate(anim_vars)
            var = f(Y)
            var_lin = f(Y_lin)
            var_rel_err = @. (var - var_lin) / (abs(var_lin) + eps(FT))
            # adding eps(FT) to the denominator prevents divisions by 0
            frame(anims[3 * ivar - 2], plot(var_lin, clim = (-lim, lim)))
            frame(anims[3 * ivar - 1], plot(var, clim = (-lim, lim)))
            frame(anims[3 * ivar], plot(var_rel_err, clim = (-10, 10)))
        end
    end
    for (ivar, (name, _, _)) in enumerate(anim_vars)
        mp4(anims[3 * ivar - 2], joinpath(output_dir, "$(name)_lin.mp4"); fps)
        mp4(anims[3 * ivar - 1], joinpath(output_dir, "$name.mp4"); fps)
        mp4(anims[3 * ivar], joinpath(output_dir, "$(name)_rel_err.mp4"); fps)
    end
end

function norm_strings(var, var_lin, p)
    norm_err = norm(var .- var_lin, p; normalize = false)
    scaled_norm_err = norm_err / norm(var_lin, p; normalize = false)
    return (
        @sprintf("‚Äñœï‚Äñ_%d = %-#9.4g", p, norm(var, p; normalize = false)),
        @sprintf("‚Äñœï - œï_lin‚Äñ_%d = %-#9.4g", p, norm_err),
        @sprintf("‚Äñœï - œï_lin‚Äñ_%d/‚Äñœï_lin‚Äñ_%d = %-#9.4g", p, p, scaled_norm_err),
    )
end

# min_Œªx = 2 * (x_max / x_elem) / upsampling_factor # this should include npoly
# min_Œªz = 2 * (FT( / z_)elem) / upsampling_factor
# min_Œªx = 2 * œÄ / max_kx = x_max / max_ikx
# min_Œªz = 2 * œÄ / max_kz = 2 * z_max / max_ikz
# max_ikx = x_max / min_Œªx = upsampling_factor * x_elem / 2
# max_ikz = 2 * z_max / min_Œªz = upsampling_factor * z_elem
function œÅfb_init_coefs(
    upsampling_factor = 3,
    max_ikx = upsampling_factor * x_elem √∑ 2,
    max_ikz = upsampling_factor * z_elem,
)
    # upsampled coordinates (more upsampling gives more accurate coefficients)
    horizontal_mesh =
        periodic_line_mesh(; x_max, x_elem = upsampling_factor * x_elem)
    h_space = make_horizontal_space(horizontal_mesh, npoly)
    center_space, _ = make_hybrid_spaces(
        h_space,
        z_max,
        upsampling_factor * z_elem;
        z_stretch,
    )
    ·∂úlocal_geometry = Fields.local_geometry_field(center_space)
    ·∂úx = ·∂úlocal_geometry.coordinates.x
    ·∂úz = ·∂úlocal_geometry.coordinates.z

    # Bretherton transform of initial perturbation
    linearize_density_perturbation = false
    if linearize_density_perturbation
        ·∂úœÅb_init = @. -œÅ‚Çõ * Tb_init(·∂úx, ·∂úz, ŒîT, x_mid, d, z_max) / T‚ÇÄ
    else
        ·∂úp‚ÇÄ = @. p‚ÇÄ(·∂úz)
        ·∂úœÅ‚ÇÄ = @. ·∂úp‚ÇÄ / (R_d * T‚ÇÄ)
        ·∂úœÅ‚Ä≤_init =
            @. ·∂úp‚ÇÄ / (R_d * (T‚ÇÄ + T‚Ä≤_init(·∂úx, ·∂úz, ŒîT, x_mid, d, z_max, Œ¥))) -
               ·∂úœÅ‚ÇÄ
        ·∂úbretherton_factor_pœÅ = @. exp(-Œ¥ * ·∂úz / 2)
        ·∂úœÅb_init = @. ·∂úœÅ‚Ä≤_init / ·∂úbretherton_factor_pœÅ
    end

    # Fourier coefficients of Bretherton transform of initial perturbation
    œÅfb_init_array = Array{Complex{FT}}(undef, 2 * max_ikx + 1, 2 * max_ikz + 1)
    ·∂úfourier_factor = Fields.Field(Complex{FT}, axes(·∂úlocal_geometry))
    ·∂úintegrand = Fields.Field(Complex{FT}, axes(·∂úlocal_geometry))
    unit_integral = 2 * sum(one.(·∂úœÅb_init))
    # Since the coefficients are for a modified domain of height 2 * z_max, the
    # unit integral over the domain must be multiplied by 2 to ensure correct
    # normalization. On the other hand, ·∂úœÅb_init is assumed to be 0 outside of
    # the "true" domain, so the integral of ·∂úintegrand should not be modified.
    @progress "œÅfb_init" for ikx in (-max_ikx):max_ikx,
        ikz in (-max_ikz):max_ikz

        kx = 2 * œÄ / x_max * ikx
        kz = 2 * œÄ / (2 * z_max) * ikz
        @. ·∂úfourier_factor = exp(im * (kx * ·∂úx + kz * ·∂úz))
        @. ·∂úintegrand = ·∂úœÅb_init / ·∂úfourier_factor
        œÅfb_init_array[ikx + max_ikx + 1, ikz + max_ikz + 1] =
            sum(·∂úintegrand) / unit_integral
    end
    return œÅfb_init_array
end

function linear_solution_cache(·∂úlocal_geometry, ·∂†local_geometry)
    ·∂úz = ·∂úlocal_geometry.coordinates.z
    ·∂†z = ·∂†local_geometry.coordinates.z
    ·∂úp‚ÇÄ = @. p‚ÇÄ(·∂úz)
    return (;
        # coordinates
        ·∂úx = ·∂úlocal_geometry.coordinates.x,
        ·∂†x = ·∂†local_geometry.coordinates.x,
        ·∂úz,
        ·∂†z,

        # background state
        ·∂úp‚ÇÄ,
        ·∂úœÅ‚ÇÄ = (@. ·∂úp‚ÇÄ / (R_d * T‚ÇÄ)),
        ·∂úu‚ÇÄ = map(_ -> u‚ÇÄ, ·∂úlocal_geometry),
        ·∂úv‚ÇÄ = map(_ -> v‚ÇÄ, ·∂úlocal_geometry),
        ·∂†w‚ÇÄ = map(_ -> FT(0), ·∂†local_geometry),

        # Bretherton transform factors
        ·∂úbretherton_factor_pœÅ = (@. exp(-Œ¥ * ·∂úz / 2)),
        ·∂úbretherton_factor_uvwT = (@. exp(Œ¥ * ·∂úz / 2)),
        ·∂†bretherton_factor_uvwT = (@. exp(Œ¥ * ·∂†z / 2)),

        # Fourier coefficients of Bretherton transform of initial perturbation
        œÅfb_init_array = œÅfb_init_coefs(),

        # Fourier transform factors
        ·∂úfourier_factor = Fields.Field(Complex{FT}, axes(·∂úlocal_geometry)),
        ·∂†fourier_factor = Fields.Field(Complex{FT}, axes(·∂†local_geometry)),

        # Bretherton transform of final perturbation
        ·∂úpb = Fields.Field(FT, axes(·∂úlocal_geometry)),
        ·∂úœÅb = Fields.Field(FT, axes(·∂úlocal_geometry)),
        ·∂úub = Fields.Field(FT, axes(·∂úlocal_geometry)),
        ·∂úvb = Fields.Field(FT, axes(·∂úlocal_geometry)),
        ·∂†wb = Fields.Field(FT, axes(·∂†local_geometry)),

        # final state
        ·∂úp = Fields.Field(FT, axes(·∂úlocal_geometry)),
        ·∂úœÅ = Fields.Field(FT, axes(·∂úlocal_geometry)),
        ·∂úu = Fields.Field(FT, axes(·∂úlocal_geometry)),
        ·∂úv = Fields.Field(FT, axes(·∂úlocal_geometry)),
        ·∂†w = Fields.Field(FT, axes(·∂†local_geometry)),

        # final temperature
        ·∂úT = Fields.Field(FT, axes(·∂úlocal_geometry)),
    )
end

function linear_solution!(Y, lin_cache, t)
    (; ·∂úx, ·∂†x, ·∂úz, ·∂†z, ·∂úp‚ÇÄ, ·∂úœÅ‚ÇÄ, ·∂úu‚ÇÄ, ·∂úv‚ÇÄ, ·∂†w‚ÇÄ) = lin_cache
    (; ·∂úbretherton_factor_pœÅ) = lin_cache
    (; ·∂úbretherton_factor_uvwT, ·∂†bretherton_factor_uvwT) = lin_cache
    (; œÅfb_init_array, ·∂úfourier_factor, ·∂†fourier_factor) = lin_cache
    (; ·∂úpb, ·∂úœÅb, ·∂úub, ·∂úvb, ·∂†wb, ·∂úp, ·∂úœÅ, ·∂úu, ·∂úv, ·∂†w, ·∂úT) = lin_cache

    ·∂úpb .= FT(0)
    ·∂úœÅb .= FT(0)
    ·∂úub .= FT(0)
    ·∂úvb .= FT(0)
    ·∂†wb .= FT(0)
    max_ikx, max_ikz = (size(œÅfb_init_array) .- 1) .√∑ 2
    for ikx in (-max_ikx):max_ikx, ikz in (-max_ikz):max_ikz
        kx = 2 * œÄ / x_max * ikx
        kz = 2 * œÄ / (2 * z_max) * ikz

        # Fourier coefficient of ·∂úœÅb_init (for current kx and kz)
        œÅfb_init = œÅfb_init_array[ikx + max_ikx + 1, ikz + max_ikz + 1]

        # Fourier factors, shifted by u‚ÇÄ * t along the x-axis
        @. ·∂úfourier_factor = exp(im * (kx * (·∂úx - u‚ÇÄ * t) + kz * ·∂úz))
        @. ·∂†fourier_factor = exp(im * (kx * (·∂†x - u‚ÇÄ * t) + kz * ·∂†z))

        # roots of a‚ÇÅ(s)
        p‚ÇÅ = c‚Çõ¬≤ * (kx^2 + kz^2 + Œ¥^2 / 4) + f^2
        q‚ÇÅ = grav * kx^2 * (c‚Çõ¬≤ * Œ¥ - grav) + c‚Çõ¬≤ * f^2 * (kz^2 + Œ¥^2 / 4)
        Œ±¬≤ = p‚ÇÅ / 2 - sqrt(p‚ÇÅ^2 / 4 - q‚ÇÅ)
        Œ≤¬≤ = p‚ÇÅ / 2 + sqrt(p‚ÇÅ^2 / 4 - q‚ÇÅ)
        Œ± = sqrt(Œ±¬≤)
        Œ≤ = sqrt(Œ≤¬≤)

        # inverse Laplace transform of s^p/((s^2 + Œ±^2)(s^2 + Œ≤^2)) for p ‚àà -1:3
        if Œ± == 0
            L‚Çã‚ÇÅ = (Œ≤¬≤ * t^2 / 2 - 1 + cos(Œ≤ * t)) / Œ≤^4
            L‚ÇÄ = (Œ≤ * t - sin(Œ≤ * t)) / Œ≤^3
        else
            L‚Çã‚ÇÅ =
                (-cos(Œ± * t) / Œ±¬≤ + cos(Œ≤ * t) / Œ≤¬≤) / (Œ≤¬≤ - Œ±¬≤) + 1 / (Œ±¬≤ * Œ≤¬≤)
            L‚ÇÄ = (sin(Œ± * t) / Œ± - sin(Œ≤ * t) / Œ≤) / (Œ≤¬≤ - Œ±¬≤)
        end
        L‚ÇÅ = (cos(Œ± * t) - cos(Œ≤ * t)) / (Œ≤¬≤ - Œ±¬≤)
        L‚ÇÇ = (-sin(Œ± * t) * Œ± + sin(Œ≤ * t) * Œ≤) / (Œ≤¬≤ - Œ±¬≤)
        L‚ÇÉ = (-cos(Œ± * t) * Œ±¬≤ + cos(Œ≤ * t) * Œ≤¬≤) / (Œ≤¬≤ - Œ±¬≤)

        # Fourier coefficients of Bretherton transforms of final perturbations
        C‚ÇÅ = grav * (grav - c‚Çõ¬≤ * (im * kz + Œ¥ / 2))
        C‚ÇÇ = grav * (im * kz - Œ¥ / 2)
        pfb = -œÅfb_init * (L‚ÇÅ + L‚Çã‚ÇÅ * f^2) * C‚ÇÅ
        œÅfb =
            œÅfb_init *
            (L‚ÇÉ + L‚ÇÅ * (p‚ÇÅ + C‚ÇÇ) + L‚Çã‚ÇÅ * f^2 * (c‚Çõ¬≤ * (kz^2 + Œ¥^2 / 4) + C‚ÇÇ))
        ufb = œÅfb_init * L‚ÇÄ * im * kx * C‚ÇÅ / œÅ‚Çõ
        vfb = -œÅfb_init * L‚Çã‚ÇÅ * im * kx * f * C‚ÇÅ / œÅ‚Çõ
        wfb = -œÅfb_init * (L‚ÇÇ + L‚ÇÄ * (f^2 + c‚Çõ¬≤ * kx^2)) * grav / œÅ‚Çõ

        # Bretherton transforms of final perturbations
        @. ·∂úpb += real(pfb * ·∂úfourier_factor)
        @. ·∂úœÅb += real(œÅfb * ·∂úfourier_factor)
        @. ·∂úub += real(ufb * ·∂úfourier_factor)
        @. ·∂úvb += real(vfb * ·∂úfourier_factor)
        @. ·∂†wb += real(wfb * ·∂†fourier_factor)
        # The imaginary components should be 0 (or at least very close to 0).
    end

    # final state
    @. ·∂úp = ·∂úp‚ÇÄ + ·∂úpb * ·∂úbretherton_factor_pœÅ
    @. ·∂úœÅ = ·∂úœÅ‚ÇÄ + ·∂úœÅb * ·∂úbretherton_factor_pœÅ
    @. ·∂úu = ·∂úu‚ÇÄ + ·∂úub * ·∂úbretherton_factor_uvwT
    @. ·∂úv = ·∂úv‚ÇÄ + ·∂úvb * ·∂úbretherton_factor_uvwT
    @. ·∂†w = ·∂†w‚ÇÄ + ·∂†wb * ·∂†bretherton_factor_uvwT
    @. ·∂úT = ·∂úp / (R_d * ·∂úœÅ)

    @. Y.c.œÅ = ·∂úœÅ
    if ·∂úùîº_name == :œÅŒ∏
        @. Y.c.œÅŒ∏ = ·∂úœÅ * ·∂úT * (p_0 / ·∂úp)^(R_d / cp_d)
    elseif ·∂úùîº_name == :œÅe
        @. Y.c.œÅe =
            ·∂úœÅ * (
                cv_d * (·∂úT - T_tri) +
                (·∂úu^2 + ·∂úv^2 + ·∂úinterp(·∂†w)^2) / 2 +
                grav * ·∂úz
            )
    elseif ·∂úùîº_name == :œÅe_int
        @. Y.c.œÅe_int = ·∂úœÅ * cv_d * (·∂úT - T_tri)
    end
    # NOTE: The following two lines are a temporary workaround b/c Covariant12Vector won't accept a non-zero second component in an XZ-space.
    # So we temporarily set it to zero and then reassign its intended non-zero value (since in case of large-scale config ·∂úv is non-zero)
    @. Y.c.u‚Çï = Geometry.Covariant12Vector(Geometry.UVVector(·∂úu, FT(0.0)))
    @. Y.c.u‚Çï.components.data.:2 .= ·∂úv
    @. Y.f.w = Geometry.Covariant3Vector(Geometry.WVector(·∂†w))
end
