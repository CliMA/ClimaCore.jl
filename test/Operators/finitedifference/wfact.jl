using Test

import ClimaCore
# To avoid JET failures in the error message
ClimaCore.Operators.allow_mismatched_fd_spaces() = true

using ClimaCore:
    Geometry, Domains, Meshes, Topologies, Spaces, Fields, Operators

import ClimaCore.Utilities: half
import LinearAlgebra: norm_sqr

FT = Float32
radius = FT(1e7)
zmax = FT(1e4)
helem = npoly = 2
velem = 4

hdomain = Domains.SphereDomain(radius)
hmesh = Meshes.EquiangularCubedSphere(hdomain, helem)
htopology = Topologies.Topology2D(hmesh)
quad = Spaces.Quadratures.GLL{npoly + 1}()
hspace = Spaces.SpectralElementSpace2D(htopology, quad)

vdomain = Domains.IntervalDomain(
    Geometry.ZPoint{FT}(zero(FT)),
    Geometry.ZPoint{FT}(zmax);
    boundary_tags = (:bottom, :top),
)
vmesh = Meshes.IntervalMesh(vdomain, nelems = velem)
center_space = Spaces.CenterFiniteDifferenceSpace(vmesh)

#=
# TODO: Replace this with a space that includes topography.
center_space = Spaces.ExtrudedFiniteDifferenceSpace(hspace, vspace)
center_coords = Fields.coordinate_field(center_space)
face_space = Spaces.FaceExtrudedFiniteDifferenceSpace(center_space)
=#
face_space = Spaces.FaceFiniteDifferenceSpace(center_space)

·∂úœÅe = ones(center_space)
·∂úœÅ = ones(center_space)
·∂úp = ones(center_space)
·∂†w = Geometry.Covariant3Vector.(ones(face_space))
BDT = Operators.StencilCoefs{-half, half, NTuple{2, FT}}
QDT = Operators.StencilCoefs{-(1 + half), 1 + half, NTuple{4, FT}}

# this is just for testing the optimizations, so we can just make everything 1s
‚àÇ·∂úK‚àÇ·∂†w_data = similar(·∂úœÅ, BDT)
‚àÇ·∂úùîº‚Çú‚àÇ·∂†ùïÑ = similar(·∂úœÅ, QDT)


# Allow one() to be called on vectors.
Base.one(::T) where {T <: Geometry.AxisTensor} = one(T)
Base.one(::Type{T}) where {T‚Ä≤, A, S, T <: Geometry.AxisTensor{T‚Ä≤, 1, A, S}} =
    T(axes(T), S(one(T‚Ä≤)))

function wfact_test(‚àÇ·∂úùîº‚Çú‚àÇ·∂†ùïÑ, ‚àÇ·∂úK‚àÇ·∂†w_data, ·∂úœÅe, ·∂úœÅ, ·∂úp, ·∂†w)

    FT = eltype(·∂úœÅ)

    compose = Operators.ComposeStencils()

    ·∂údiv·µ• = Operators.DivergenceF2C()
    ·∂údiv·µ•_stencil = Operators.Operator2Stencil(·∂údiv·µ•)
    ·∂úinterp = Operators.InterpolateF2C()
    ·∂úinterp_stencil = Operators.Operator2Stencil(·∂úinterp)


    ·∂†interp = Operators.InterpolateC2F(
        bottom = Operators.Extrapolate(),
        top = Operators.Extrapolate(),
    )
    ·∂†interp_stencil = Operators.Operator2Stencil(·∂†interp)

    R_d = FT(1)
    cv_d = FT(1)

    # If we let ·∂†w_data = ·∂†w.components.data.:1 and ·∂†w_unit = one.(·∂†w), then
    # ·∂†w == ·∂†w_data .* ·∂†w_unit. The Jacobian blocks involve ·∂†w_data, not ·∂†w.
    ·∂†w_data = ·∂†w.components.data.:1

    # ·∂úœÅe‚Çú = -·∂údiv·µ•(·∂†interp(·∂úœÅe + ·∂úp) * ·∂†w)
    # ‚àÇ(·∂úœÅe‚Çú)/‚àÇ(·∂†w_data) =
    #     -·∂údiv·µ•_stencil(·∂†interp(·∂úœÅe + ·∂úp) * ·∂†w_unit) -
    #     ·∂údiv·µ•_stencil(·∂†w) * ‚àÇ(·∂†interp(·∂úœÅe + ·∂úp))/‚àÇ(·∂†w_data)
    # ‚àÇ(·∂†interp(·∂úœÅe + ·∂úp))/‚àÇ(·∂†w_data) =
    #     ‚àÇ(·∂†interp(·∂úœÅe + ·∂úp))/‚àÇ(·∂úp) * ‚àÇ(·∂úp)/‚àÇ(·∂†w_data)
    # ‚àÇ(·∂†interp(·∂úœÅe + ·∂úp))/‚àÇ(·∂úp) = ·∂†interp_stencil(1)
    # ‚àÇ(·∂úp)/‚àÇ(·∂†w_data) = ‚àÇ(·∂úp)/‚àÇ(·∂úK) * ‚àÇ(·∂úK)/‚àÇ(·∂†w_data)
    # ‚àÇ(·∂úp)/‚àÇ(·∂úK) = -·∂úœÅ * R_d / cv_d
    @. ‚àÇ·∂úK‚àÇ·∂†w_data =
        ·∂úinterp(·∂†w_data) *
        norm_sqr(one(·∂úinterp(·∂†w))) *
        ·∂úinterp_stencil(one(·∂†w_data))

    @. ‚àÇ·∂úùîº‚Çú‚àÇ·∂†ùïÑ =
        -(·∂údiv·µ•_stencil(·∂†interp(·∂úœÅe + ·∂úp) * one(·∂†w))) - compose(
            ·∂údiv·µ•_stencil(·∂†w),
            compose(·∂†interp_stencil(one(·∂úp)), -(·∂úœÅ * R_d / cv_d) * ‚àÇ·∂úK‚àÇ·∂†w_data),
        )

    return nothing
end

@time wfact_test(‚àÇ·∂úùîº‚Çú‚àÇ·∂†ùïÑ, ‚àÇ·∂úK‚àÇ·∂†w_data, ·∂úœÅe, ·∂úœÅ, ·∂úp, ·∂†w)
@time wfact_test(‚àÇ·∂úùîº‚Çú‚àÇ·∂†ùïÑ, ‚àÇ·∂úK‚àÇ·∂†w_data, ·∂úœÅe, ·∂úœÅ, ·∂úp, ·∂†w)

using JET
@testset "JET test for `compose` in wfact! kernel" begin
    @test_opt wfact_test(‚àÇ·∂úùîº‚Çú‚àÇ·∂†ùïÑ, ‚àÇ·∂úK‚àÇ·∂†w_data, ·∂úœÅe, ·∂úœÅ, ·∂úp, ·∂†w)
end

ClimaCore.Operators.allow_mismatched_fd_spaces() = false
